name: Build
permissions:
  contents: write  # Allow writing to repository contents (for pushing tags)
  actions: write   # Allows triggering actions

on:
  workflow_dispatch: # This allows this workflow to be called from another workflow
    

jobs:
  build-kernel-oneplus-kernelsu-susfs:
    runs-on: ubuntu-22.04

    steps:
      - name: Setup System
        run: |
          export DEBIAN_FRONTEND=noninteractive
          echo "DEBIAN_FRONTEND=noninteractive" >> $GITHUB_ENV
          
          df -h
          
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /usr/local/.ghcup /opt/hostedtoolcache/CodeQL /usr/local/share/powershell /usr/share/swift || true
          sudo docker image prune --all --force
          echo "some directories deleted"
          
          # Remove large unwanted packages
          sudo apt-get purge -y \
            aria2 ansible azure-cli shellcheck rpm xorriso zsync \
            firefox gfortran-9 google-chrome-stable \
            google-cloud-sdk imagemagick \
            libmagickcore-dev libmagickwand-dev libmagic-dev ant ant-optional kubectl \
            mercurial apt-transport-https mono-complete \
            unixodbc-dev yarn chrpath libxft-dev \
            libfreetype6 libfreetype6-dev libfontconfig1 libfontconfig1-dev \
            snmp pollinate libpq-dev postgresql-client powershell ruby-full \
            sphinxsearch subversion microsoft-edge-stable || true
            
          # Regex-based purges (for bulk families like mysql, php, dotnet)
          sudo apt-get purge -y $(dpkg-query -W -f='${binary:Package}\n' | grep -E '^mysql|^php|^dotnet') || true
          
          # Clean up
          sudo apt-get autoremove -y
          sudo apt-get autoclean -y
          echo "some packages purged"
          
          df -h

      - uses: actions/checkout@v4

      - name: Set CONFIG Environment Variable
        run: |
          CONFIG="OP9"
          echo "Creating folder for configuration: $CONFIG..."
          mkdir -p "$CONFIG"
          
          # Set CONFIG as an environment variable for future steps
          echo "CONFIG=$CONFIG" >> $GITHUB_ENV
          
          echo "CONFIG set to: $CONFIG"

      - name: Install Repo and Python
        run: |
          # Install dependencies
          sudo apt-get update
          sudo apt-get install -y curl git ftp lftp wget libarchive-tools ccache python3
          sudo apt-get install -y pngcrush schedtool dpkg-dev liblz4-tool make optipng maven device-tree-compiler 
          sudo apt-get install -y libc6-dev-i386 lib32ncurses5-dev libx11-dev lib32z-dev libgl1-mesa-dev xsltproc
          sudo apt-get install -y libxml2-utils libbz2-dev libbz2-1.0 libghc-bzlib-dev squashfs-tools lzop flex tree 
          sudo apt-get install -y pwgen libswitch-perl policycoreutils minicom libxml-sax-base-perl libxml-simple-perl 
          sudo apt-get install -y zip unzip tar gzip bzip2 rar unrar llvm g++-multilib bison gperf zlib1g-dev automake
          sudo apt-get install -y build-essential bc gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi libssl-dev libfl-dev binutils-aarch64-linux-gnu
          
          mkdir -p "${{ env.CONFIG }}/git-repo"
          curl -sSL https://storage.googleapis.com/git-repo-downloads/repo > "${{ env.CONFIG }}/git-repo/repo"
          chmod a+rx "${{ env.CONFIG }}/git-repo/repo"
          echo "REPO=${{ github.workspace }}/${{ env.CONFIG }}/git-repo/repo" >> $GITHUB_ENV

      - name: Initialize and Sync Kernel Source
        run: |
          cd "$CONFIG"
          
          # Initialize and sync kernel source
          echo "Initializing and syncing kernel source..."
          $REPO init -u https://github.com/xiakehelper/BUILD_OP9_KERNEL.git -b main -m manifest.xml --repo-rev=v2.16 --depth=1 --no-clone-bundle --no-tags
          
          # Sync repo and apply patches
          $REPO --trace sync -c --no-clone-bundle --no-tags --optimized-fetch -j$(nproc --all) --fail-fast

          set -x
          echo "${{ github.workspace }}/${{ env.CONFIG }}/prebuilts/clang/host/linux-x86/clang-r416183b/bin" >> $GITHUB_PATH
          echo "${{ github.workspace }}/${{ env.CONFIG }}/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/bin" >> $GITHUB_PATH
          echo "${{ github.workspace }}/${{ env.CONFIG }}/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9/bin" >> $GITHUB_PATH

      - name: Add SYSTEM Configuration Settings
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG/kernel/msm-5.4"
          
          echo "Adding configuration settings to gki_defconfig..."

          #Add Docker config setting
          echo "CONFIG_NAMESPACES=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_NET_NS=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_PID_NS=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_IPC_NS=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_UTS_NS=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_CGROUPS=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_CGROUP_CPUACCT=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_CGROUP_DEVICE=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_CGROUP_FREEZER=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_CGROUP_SCHED=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_CPUSETS=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_MEMCG=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KEYS=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_VETH=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_BRIDGE=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_BRIDGE_NETFILTER=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP_NF_FILTER=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP_NF_TARGET_MASQUERADE=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_NETFILTER_XT_MATCH_ADDRTYPE=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_NETFILTER_XT_MATCH_CONNTRACK=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_NETFILTER_XT_MATCH_IPVS=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_NETFILTER_XT_MARK=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_NETFILTER_XT_SET=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP_NF_NAT=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_NF_NAT=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_POSIX_MQUEUE=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_NF_NAT_IPV4=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_NF_NAT_NEEDED=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_CGROUP_BPF=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_USER_NS=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_SECCOMP=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_SECCOMP_FILTER=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_CGROUP_PIDS=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_MEMCG_SWAP=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_MEMCG_SWAP_ENABLED=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_IOSCHED_CFQ=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_CFQ_GROUP_IOSCHED=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_BLK_CGROUP=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_BLK_DEV_THROTTLING=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_CGROUP_PERF=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_CGROUP_HUGETLB=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_NET_CLS_CGROUP=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_CGROUP_NET_PRIO=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_CFS_BANDWIDTH=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_FAIR_GROUP_SCHED=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_RT_GROUP_SCHED=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP_NF_TARGET_REDIRECT=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP_VS=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP_VS_NFCT=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP_VS_PROTO_TCP=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP_VS_PROTO_UDP=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP_VS_RR=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_SECURITY_SELINUX=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_SECURITY_APPARMOR=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_EXT4_FS=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_EXT4_FS_POSIX_ACL=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_EXT4_FS_SECURITY=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_VXLAN=y" >> ./arch/arm64/configs/gki_defconfig

          echo "CONFIG_BRIDGE_VLAN_FILTERING=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_CRYPTO=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_CRYPTO_AEAD=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_CRYPTO_GCM=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_CRYPTO_SEQIV=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_CRYPTO_GHASH=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_XFRM=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_XFRM_USER=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_XFRM_ALGO=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_INET_ESP=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_INET_XFRM_MODE_TRANSPORT=y" >> ./arch/arm64/configs/gki_defconfig
  
          echo "CONFIG_IPVLAN=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_MACVLAN=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_DUMMY=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_NF_NAT_FTP=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_NF_CONNTRACK_FTP=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_NF_NAT_TFTP=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_NF_CONNTRACK_TFTP=y" >> ./arch/arm64/configs/gki_defconfig
          
          # TEST        
          echo "CONFIG_AUFS_FS=y" >> ./arch/arm64/configs/gki_defconfig

          # END
          echo "CONFIG_BLK_DEV_DM=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_DM_THIN_PROVISIONING=y" >> ./arch/arm64/configs/gki_defconfig

          
          echo "CONFIG_OVERLAY_FS=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP_SET=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP_SET_MAX=256" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP_SET_BITMAP_IP=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP_SET_BITMAP_IPMAC=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP_SET_BITMAP_PORT=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP_SET_HASH_IP=y" >> ./arch/arm64/configs/gki_defconfig          
          echo "CONFIG_IP_SET_HASH_IPMARK=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP_SET_HASH_IPPORT=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP_SET_HASH_IPPORTIP=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP_SET_HASH_IPPORTNET=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP_SET_HASH_IPMAC=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP_SET_HASH_MAC=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP_SET_HASH_NETPORTNET=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP_SET_HASH_NET=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP_SET_HASH_NETNET=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP_SET_HASH_NETPORT=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP_SET_HASH_NETIFACE=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP_SET_LIST_SET=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_NAMESPACES=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_PID_NS=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_BPF=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_BPF_SYSCALL=y" >> ./arch/arm64/configs/gki_defconfig

          
          # Add QCOM Heep config setting
          echo "CONFIG_DMABUF_HEAPS=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_DMABUF_SYSFS_STATS=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_DMABUF_HEAPS_DEFERRED_FREE=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_DMABUF_HEAPS_PAGE_POOL=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_QCOM_DMABUF_HEAPS=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_QCOM_DMABUF_HEAPS_SYSTEM=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_QCOM_DMABUF_HEAPS_PAGE_POOL_REFILL=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_QCOM_DMABUF_HEAPS_SYSTEM_SECURE=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_QCOM_DMABUF_HEAPS_CMA=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_QCOM_DMABUF_HEAPS_CARVEOUT=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_QCOM_DMABUF_HEAPS_BITSTREAM_CONTIG=y" >> ./arch/arm64/configs/gki_defconfig
          
      - name: Run sed and perl Commands
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG/kernel/msm-5.4"
          
          echo "Running sed commands..."
          
          sed -i 's/CONFIG_LTO=n/CONFIG_LTO=y/' "./arch/arm64/configs/gki_defconfig"
          sed -i 's/CONFIG_LTO_CLANG_FULL=y/CONFIG_LTO_CLANG_THIN=y/' "./arch/arm64/configs/gki_defconfig"
          sed -i 's/CONFIG_LTO_CLANG_NONE=y/CONFIG_LTO_CLANG_THIN=y/' "./arch/arm64/configs/gki_defconfig"
          
          # Run sed commands for modifications
          sed -i 's/check_defconfig//' ./build.config.gki
          sed -i '$s|echo "\$res"|echo "\$res-xiakehelper"|' ./scripts/setlocalversion
          sed -i 's/-dirty//' ./scripts/setlocalversion
         
          # Run perl command to modify UTS_VERSION
          perl -pi -e 's{UTS_VERSION="\$\(echo \$UTS_VERSION \$CONFIG_FLAGS \$TIMESTAMP \| cut -b -\$UTS_LEN\)"}{UTS_VERSION="#1 SMP PREEMPT Thu Mar 05 04:20:00 UTC 2025"}' ./scripts/mkcompile_h

      - name: GCC Build
        run: |
          cd "$CONFIG"
          sed -i s/build-user/xiakehelper/g build/_setup_env.sh
          sed -i s/build-host/oos/g build/_setup_env.sh
          cp $GITHUB_WORKSPACE/build.config.lemonadep ./kernel/msm-5.4/build.config.lemonadep
          patch -p1 -F 3 < $GITHUB_WORKSPACE/Patches/fix_op9p_build_errors.patch
          patch -p1 --binary -F 3 < $GITHUB_WORKSPACE/Patches/si_audo_codec_build.patch
          sed -i 's/^UAPI_CFLAGS :=.*/& -Wno-gnu-variable-sized-type-not-at-end/' ./kernel/msm-5.4/usr/include/Makefile
          
          
          # Export variables for immediate use in the shell
          export CLANG_TRIPLE=aarch64-linux-gnu-
          export ARCH=arm64
          export SUBARCH=arm64
          
          # Append variables to $GITHUB_ENV for GitHub Actions
          echo "CLANG_TRIPLE=aarch64-linux-gnu-" >> $GITHUB_ENV
          echo "ARCH=arm64" >> $GITHUB_ENV
          echo "SUBARCH=arm64" >> $GITHUB_ENV
          
          # Export build configuration variables
          export BUILD_CONFIG=kernel/msm-5.4/build.config.lemonadep
          export VARIANT=qgki
          export BUILTIN=1
          export LTO=thin
          export POLLY=1
          export GRAPHITE=1
          export PGO=1
          export SKIP_MRPROPER=1
          export BUILD_KERNEL=1
          export CC=clang
          export CROSS_COMPILE=aarch64-linux-android-
          export CROSS_COMPILE_ARM32=arm-linux-androideabi-
          export LD=ld.lld
          export AR=llvm-ar
          export NM=llvm-nm
          export OBJSIZE=llvm-size
          export OBJCOPY=llvm-objcopy
          export OBJDUMP=llvm-objdump
          export READELF=llvm-readelf
          export STRIP=llvm-strip
          export LLVM_AR=llvm-ar
          export LLVM_DIS=llvm-dis
          export LDGOLD=aarch64-linux-gnu-ld.gold
          export LLVM=1
          export LLVM_IAS=1
          # export AS=aarch64-linux-gnu-as
          
          # Append build configuration variables to $GITHUB_ENV
          echo "BUILD_CONFIG=kernel/msm-5.4/build.config.lemonadep" >> $GITHUB_ENV
          echo "VARIANT=qgki" >> $GITHUB_ENV
          echo "BUILTIN=1" >> $GITHUB_ENV
          echo "LTO=thin" >> $GITHUB_ENV
          echo "POLLY=1" >> $GITHUB_ENV
          echo "GRAPHITE=1" >> $GITHUB_ENV
          echo "PGO=1" >> $GITHUB_ENV
          echo "SKIP_MRPROPER=1" >> $GITHUB_ENV
          echo "BUILD_KERNEL=1" >> $GITHUB_ENV
          echo "CC=clang" >> $GITHUB_ENV
          echo "CROSS_COMPILE=aarch64-linux-android-" >> $GITHUB_ENV
          echo "CROSS_COMPILE_ARM32=arm-linux-androideabi-" >> $GITHUB_ENV
          echo "LD=ld.lld" >> $GITHUB_ENV
          echo "AR=llvm-ar" >> $GITHUB_ENV
          echo "NM=llvm-nm" >> $GITHUB_ENV
          echo "OBJSIZE=llvm-size" >> $GITHUB_ENV
          echo "OBJCOPY=llvm-objcopy" >> $GITHUB_ENV
          echo "OBJDUMP=llvm-objdump" >> $GITHUB_ENV
          echo "READELF=llvm-readelf" >> $GITHUB_ENV
          echo "STRIP=llvm-strip" >> $GITHUB_ENV
          echo "LLVM_AR=llvm-ar" >> $GITHUB_ENV
          echo "LLVM_DIS=llvm-dis" >> $GITHUB_ENV
          echo "LDGOLD=aarch64-linux-gnu-ld.gold" >> $GITHUB_ENV
          echo "LLVM=1" >> $GITHUB_ENV
          echo "LLVM_IAS=1" >> $GITHUB_ENV
          # echo "AS=aarch64-linux-gnu-as" >> $GITHUB_ENV
          
          LLVM=1 LLVM_IAS=1 build/build.sh -j4

      - name: Create zip
        run: |
          cd "$CONFIG"
          mkdir MyKernel
          chmod 777 MyKernel
          cp out/msm-5.4-lahaina-qgki/dist/Image MyKernel/
          cd MyKernel/ && zip -r9 OP9P-$(/bin/date -u '+%d%m%Y%I%M')-clang.zip * -x .git README.md ./*/placeholder
          cd ../

      - name: Archive Kernel Source
        if: always()
        run: |
          cd "$CONFIG"
          tar -czf kernel-source.tar.gz --exclude='.git' --exclude='out' --warning=no-file-changed ./kernel ./vendor
          ls -la

      - name: Upload Kernel Source Archive
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: kernel-source-archive
          path: ${{ env.CONFIG }}/kernel-source.tar.gz
          retention-days: 7

      - uses: actions/upload-artifact@main
        with:
         name: "lemonadep-ksun-release-${{ env.KSUNVER }}-zip"
         path: ${{ env.CONFIG }}/MyKernel/*.zip
